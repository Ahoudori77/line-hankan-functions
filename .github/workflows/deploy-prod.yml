name: deploy-prod-standard
on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

concurrency:
  group: prod-standard
  cancel-in-progress: false

env:
  ENV: prod
  LOCATION: japaneast
  PROJECT: frema
  CLIENT: ${{ vars.CLIENT }}

jobs:
  iac:
    runs-on: ubuntu-latest
    outputs:
      FUNC:   ${{ steps.out.outputs.FUNC }}
      SWA:    ${{ steps.out.outputs.SWA }}
      KV:     ${{ steps.out.outputs.KV }}
      STG:    ${{ steps.out.outputs.STG }}
      COSMOS: ${{ steps.out.outputs.COSMOS }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Bicep CLI
        run: az bicep install

      # ← 検証は CLI ビルドだけに変更（構文チェックのみ）
      - name: Compile Bicep (syntax check)
        run: az bicep build -f infra/standard/main.bicep

      - name: Deploy Bicep (CLI)
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          az deployment group create \
            -g "$RG" \
            --name iac-${{ github.run_id }} \
            --template-file infra/standard/main.bicep \
            --parameters env=${{ env.ENV }} client=${{ env.CLIENT }} location=${{ env.LOCATION }} project=${{ env.PROJECT }}

      - name: Capture outputs
        id: out
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          echo "FUNC=$(az deployment group show -g "$RG" -n iac-${{ github.run_id }} --query properties.outputs.funcName.value -o tsv)" >> $GITHUB_OUTPUT
          echo "SWA=$(az deployment group show -g "$RG" -n iac-${{ github.run_id }} --query properties.outputs.swaName.value  -o tsv)" >> $GITHUB_OUTPUT
          echo "KV=$(az deployment group show  -g "$RG" -n iac-${{ github.run_id }} --query properties.outputs.kvName.value   -o tsv)" >> $GITHUB_OUTPUT
          echo "STG=$(az deployment group show -g "$RG" -n iac-${{ github.run_id }} --query properties.outputs.stgName.value  -o tsv)" >> $GITHUB_OUTPUT
          echo "COSMOS=$(az deployment group show -g "$RG" -n iac-${{ github.run_id }} --query properties.outputs.cosmosName.value -o tsv)" >> $GITHUB_OUTPUT

      # 失敗時にARMの詳細を必ずダンプ（原因特定用）
      - name: Dump last deployment error
        if: failure()
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          az deployment group list -g "$RG" -o table
          DEPLOY=$(az deployment group list -g "$RG" --query "[-1].name" -o tsv)
          az deployment group show -g "$RG" -n "$DEPLOY" --query properties.error -o jsonc || true

      - name: Inject connection secrets to Key Vault
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          KV: ${{ steps.out.outputs.KV }}
          COSMOS: ${{ steps.out.outputs.COSMOS }}
          STG: ${{ steps.out.outputs.STG }}
        run: |
          COSMOS_EP="https://${COSMOS}.documents.azure.com:443/"
          COSMOS_KEY=$(az cosmosdb keys list -n "$COSMOS" -g "$RG" --type keys --query primaryMasterKey -o tsv)
          az keyvault secret set --vault-name "$KV" -n COSMOS_ENDPOINT --value "$COSMOS_EP"
          az keyvault secret set --vault-name "$KV" -n COSMOS_PRIMARY_KEY --value "$COSMOS_KEY"
          CONN=$(az storage account show-connection-string -n "$STG" -g "$RG" -o tsv)
          az keyvault secret set --vault-name "$KV" -n AZURE_WEBJOBS_STORAGE --value "$CONN"

      - name: Point Function App settings to Key Vault references
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          KV: ${{ steps.out.outputs.KV }}
          FUNC: ${{ steps.out.outputs.FUNC }}
        run: |
          az functionapp config appsettings set -g "$RG" -n "$FUNC" --settings \
            AzureWebJobsStorage=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/AZURE_WEBJOBS_STORAGE\) \
            COSMOS_ENDPOINT=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/COSMOS_ENDPOINT\) \
            COSMOS_PRIMARY_KEY=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/COSMOS_PRIMARY_KEY\)

  app-func:
    needs: iac
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ① ディレクトリ存在チェック（出力: exists=true/false）
      - name: Check functions dir
        id: chk
        run: |
          if [ -d "apps/functions" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # ② 以下、存在する場合のみ実行
      - uses: actions/setup-node@v4
        if: ${{ steps.chk.outputs.exists == 'true' }}
        with:
          node-version: '20'

      - name: Build Functions
        if: ${{ steps.chk.outputs.exists == 'true' }}
        run: |
          cd apps/functions
          npm ci
          npm run build --if-present

      - name: Azure login (OIDC)
        if: ${{ steps.chk.outputs.exists == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to staging slot
        if: ${{ steps.chk.outputs.exists == 'true' }}
        uses: azure/functions-action@v1
        with:
          app-name: ${{ needs.iac.outputs.FUNC }}
          slot-name: staging
          package: apps/functions

      - name: Health check (staging)
        if: ${{ steps.chk.outputs.exists == 'true' }}
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          FUNC: ${{ needs.iac.outputs.FUNC }}
        run: |
          KEY=$(az functionapp keys list -g "$RG" -n "$FUNC" --slot staging --query functionKeys.default -o tsv)
          curl -fsS "https://$FUNC-staging.azurewebsites.net/api/admin-health?code=$KEY"

      - name: Slot swap → production
        if: ${{ steps.chk.outputs.exists == 'true' }}
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          FUNC: ${{ needs.iac.outputs.FUNC }}
        run: az webapp deployment slot swap -g "$RG" -n "$FUNC" --slot staging

  app-swa:
    needs: iac
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ① ディレクトリ存在チェック
      - name: Check liff dir
        id: chk
        run: |
          if [ -d "apps/liff" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build LIFF app
        if: ${{ steps.chk.outputs.exists == 'true' }}
        run: |
          cd apps/liff
          npm ci
          npm run build

      - name: Deploy SWA
        if: ${{ steps.chk.outputs.exists == 'true' }}
        continue-on-error: true   # SWAトークン未設定でも全体は落とさない
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_SWA_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'apps/liff'
          output_location: 'dist'
