name: deploy-prod-standard
on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

concurrency:
  group: prod-standard
  cancel-in-progress: false

env:
  ENV: prod
  LOCATION: japaneast
  PROJECT: frema
  CLIENT: ${{ vars.CLIENT }}

jobs:
  iac:
    runs-on: ubuntu-latest
    outputs:
      FUNC:   ${{ steps.out.outputs.FUNC }}
      SWA:    ${{ steps.out.outputs.SWA }}
      KV:     ${{ steps.out.outputs.KV }}
      STG:    ${{ steps.out.outputs.STG }}
      COSMOS: ${{ steps.out.outputs.COSMOS }}
    steps:
      - uses: actions/checkout@v4

      - name: Upgrade Azure CLI
        run: az upgrade --yes
      - name: Show az version
        run: az version

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Bicep CLI
        run: az bicep install

      - name: Compile Bicep (syntax check)
        run: |
          az bicep build --file infra/standard/main.bicep --outdir /tmp
          mv /tmp/main.json /tmp/iac.json

      - name: Ensure resource group
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          LOCATION: ${{ env.LOCATION }}
        run: |
          # あってもOK、無ければ作成（idempotent）
          az group create -n "$RG" -l "$LOCATION" >/dev/null

      - name: Validate template (preflight)
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          set +e
          az deployment group validate \
            -g "$RG" -f /tmp/iac.json \
            -p env='${{ env.ENV }}' client='${{ env.CLIENT }}' location='${{ env.LOCATION }}' project='${{ env.PROJECT }}' \
              enableMonitoring=false deploySwa=false \
            -o json 1>/tmp/validate.json 2>/tmp/validate.stderr
          VALID_RC=$?

          echo "----- validate.stderr -----"
          sed -n '1,200p' /tmp/validate.stderr || true

          echo "----- validate.json.error -----"
          jq -r '.error // "null"' /tmp/validate.json 2>/dev/null || true

          # ここでは落とさない（次のステップでも解析できるようにする）
          echo "VALID_RC=$VALID_RC"
          exit 0

      - name: Deploy Bicep (ARM action)
        id: deploy
        uses: azure/arm-deploy@v2
        with:
          scopeLevel: ResourceGroup
          region: ${{ env.LOCATION }}
          resourceGroupName: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          template: infra/standard/main.bicep
          parameters: |
            env=${{ env.ENV }}
            client=${{ env.CLIENT }}
            location=${{ env.LOCATION }}
            project=${{ env.PROJECT }}
            enableMonitoring=false
            deploySwa=false
          deploymentName: iac-${{ github.run_id }}

      - name: Capture outputs
        id: out
        run: |
          echo '${{ steps.deploy.outputs.deploymentOutputs }}' > /tmp/arm-outputs.json
          jq -r '
            [
              "FUNC=\(.funcName.value // \"\")",
              "SWA=\(.swaName.value // \"\")",
              "KV=\(.kvName.value // \"\")",
              "STG=\(.stgName.value // \"\")",
              "COSMOS=\(.cosmosName.value // \"\")"
            ] | .[]
          ' /tmp/arm-outputs.json >> "$GITHUB_OUTPUT"

      - name: Dump last deployment error
        if: always()
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          DEPLOY=iac-${{ github.run_id }}
          az deployment group show -g "$RG" -n "$DEPLOY" --query properties.error -o jsonc || true
          az deployment operation group list -g "$RG" -n "$DEPLOY" \
            --query "[].{op:properties.provisioningOperation, state:properties.provisioningState, code:properties.statusCode, msg:coalesce(properties.statusMessage.message, properties.statusMessage.error.message)}" \
            -o table || true

      - name: Inject connection secrets to Key Vault
        env:
          SUB: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RG:  rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          KV: ${{ steps.out.outputs.KV }}
          COSMOS: ${{ steps.out.outputs.COSMOS }}
          STG: ${{ steps.out.outputs.STG }}
        run: |
          set -euo pipefail

          # 値の存在チェック（空なら原因がすぐ分かるように fail）
          for v in KV COSMOS STG; do
            val="${!v:-}"
            if [ -z "$val" ]; then
              echo "::error title=${v} is empty::${v} output is empty. Check the 'Capture outputs' step."
              exit 1
            fi
          done

          COSMOS_EP="https://${COSMOS}.documents.azure.com:443/"
          # 管理プレーンに直接 POST（listKeys）
          COSMOS_KEY=$(az rest \
            --method post \
            --url "https://management.azure.com/subscriptions/${SUB}/resourceGroups/${RG}/providers/Microsoft.DocumentDB/databaseAccounts/${COSMOS}/listKeys?api-version=2024-05-15" \
            --query primaryMasterKey -o tsv)

          # KV へ投入
          az keyvault secret set --vault-name "$KV" -n COSMOS_ENDPOINT      --value "$COSMOS_EP"
          az keyvault secret set --vault-name "$KV" -n COSMOS_PRIMARY_KEY   --value "$COSMOS_KEY"

          # Storage の接続文字列
          CONN=$(az storage account show-connection-string -n "$STG" -g "$RG" -o tsv)
          az keyvault secret set --vault-name "$KV" -n AZURE_WEBJOBS_STORAGE --value "$CONN"


      - name: Show Azure context
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          az account show --query "{subscription:id, name:name, tenant:tenantId}" -o table
          az group show -n "$RG" -o table || true

      - name: Point Function App settings to Key Vault references
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          KV: ${{ steps.out.outputs.KV }}
          FUNC: ${{ steps.out.outputs.FUNC }}
        run: |
          az functionapp config appsettings set -g "$RG" -n "$FUNC" --settings \
            AzureWebJobsStorage=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/AZURE_WEBJOBS_STORAGE\) \
            COSMOS_ENDPOINT=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/COSMOS_ENDPOINT\) \
            COSMOS_PRIMARY_KEY=@Microsoft.KeyVault\(SecretUri=https://$KV.vault.azure.net/secrets/COSMOS_PRIMARY_KEY\)

      - name: Validate template (show real error)
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
        run: |
          az deployment group validate \
            -g "$RG" -f /tmp/iac.json \
            -p env='${{ env.ENV }}' client='${{ env.CLIENT }}' location='${{ env.LOCATION }}' project='${{ env.PROJECT }}' enableMonitoring=false \
            --query error -o jsonc
        
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iac-debug
          path: |
            /tmp/validate.json
            /tmp/validate.stderr
            /tmp/deploy.json
            /tmp/deploy.stderr

  app-func:
    needs: iac
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check functions dir
        id: chk
        run: |
          if [ -d "apps/functions" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/setup-node@v4
        if: ${{ steps.chk.outputs.exists == 'true' }}
        with:
          node-version: '20'

      - name: Build Functions
        if: ${{ steps.chk.outputs.exists == 'true' }}
        run: |
          cd apps/functions
          npm ci
          npm run build --if-present

      - name: Azure login (OIDC)
        if: ${{ steps.chk.outputs.exists == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Ensure resource group
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          LOCATION: ${{ env.LOCATION }}
        run: |
          set -e
          if ! az group show -n "$RG" >/dev/null 2>&1; then
            echo "RG '$RG' not found. Creating..."
            az group create -n "$RG" -l "$LOCATION" >/dev/null
          else
            echo "RG '$RG' exists."
          fi

      - name: Deploy to staging slot
        if: ${{ steps.chk.outputs.exists == 'true' }}
        uses: azure/functions-action@v1
        with:
          app-name: ${{ needs.iac.outputs.FUNC }}
          slot-name: staging
          package: apps/functions

      - name: Health check (staging)
        if: ${{ steps.chk.outputs.exists == 'true' }}
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          FUNC: ${{ needs.iac.outputs.FUNC }}
        run: |
          KEY=$(az functionapp keys list -g "$RG" -n "$FUNC" --slot staging --query functionKeys.default -o tsv)
          curl -fsS "https://$FUNC-staging.azurewebsites.net/api/admin-health?code=$KEY"

      - name: Slot swap → production
        if: ${{ steps.chk.outputs.exists == 'true' }}
        env:
          RG: rg-${{ env.PROJECT }}-${{ env.CLIENT }}-${{ env.ENV }}-app
          FUNC: ${{ needs.iac.outputs.FUNC }}
        run: az webapp deployment slot swap -g "$RG" -n "$FUNC" --slot staging

  app-swa:
    needs: iac
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check liff dir
        id: chk
        run: |
          if [ -d "apps/liff" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build LIFF app
        if: ${{ steps.chk.outputs.exists == 'true' }}
        run: |
          cd apps/liff
          npm ci
          npm run build

      - name: Deploy SWA
        if: ${{ steps.chk.outputs.exists == 'true' }}
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_SWA_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'apps/liff'
          output_location: 'dist'